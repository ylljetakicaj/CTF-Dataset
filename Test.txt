using System;
using System.Collections.Generic;
using System.Configuration;
using System.Data.SqlClient;
using System.Net.Mail;
using Newtonsoft.Json.Linq;

namespace KADAPI.Helpers
{
    public static class NotificationHelper
    {
        private static string connectionString = ConfigurationManager.ConnectionStrings["YourConnectionStringName"].ConnectionString;

        public static void NotifyApproversFromJsonHipoteka(int hipotekaId)
        {
            MortgageInfo hipoteka = GetMortgageInfo(hipotekaId);
            if (hipoteka == null)
                return;

            UserInfo user = GetUserInfo(hipoteka.UserId);
            if (user == null)
                return;

            List<string> approvers = GetApproverEmails(user.Dega);
            if (approvers.Count == 0)
                return;

            foreach (string email in approvers)
            {
                string subject = $"[KADAPI] {hipoteka.Lloji} - New Mortgage from {user.FullName}";
                string body = $@"
                    <html>
                        <body style='font-family: Arial, sans-serif;'>
                            <h3>New {hipoteka.Lloji} Request</h3>
                            <p><b>Created by:</b> {user.FullName} (UserID: {user.UserId})</p>
                            <p><b>Branch:</b> {user.Dega}</p>
                            <p><b>Comment:</b> {hipoteka.Koment}</p>
                            <p><b>Date:</b> {hipoteka.InsertDate}</p>
                            {(string.IsNullOrEmpty(hipoteka.Details) ? "" : $"<p><b>Details:</b> {hipoteka.Details}</p>")}
                            <br/>
                            <p>Please review this request in the <b>KADAPI</b> system.</p>
                        </body>
                    </html>";

                try
                {
                    SendEmail(email, subject, body);
                }
                catch (Exception ex)
                {
                    System.Diagnostics.Debug.WriteLine($"Email to {email} failed: {ex.Message}");
                }
            }
        }

        private static MortgageInfo GetMortgageInfo(int id)
        {
            using (SqlConnection conn = new SqlConnection(connectionString))
            {
                conn.Open();
                string query = "SELECT Username, Lloji, Koment, InsertDate, JsonHipotekaString FROM JsonHipoteka WHERE Id = @Id";

                using (SqlCommand cmd = new SqlCommand(query, conn))
                {
                    cmd.Parameters.AddWithValue("@Id", id);
                    using (SqlDataReader reader = cmd.ExecuteReader())
                    {
                        if (reader.Read())
                        {
                            MortgageInfo info = new MortgageInfo();
                            info.UserId = Convert.ToInt32(reader["Username"]);
                            info.Lloji = reader["Lloji"].ToString();
                            info.Koment = reader["Koment"].ToString();
                            info.InsertDate = Convert.ToDateTime(reader["InsertDate"]);

                            string json = reader["JsonHipotekaString"].ToString();
                            try
                            {
                                var jObj = JObject.Parse(json);
                                info.Details = jObj["PropertyName"]?.ToString() ?? "";
                            }
                            catch { info.Details = ""; }

                            return info;
                        }
                    }
                }
            }
            return null;
        }

        private static UserInfo GetUserInfo(int userId)
        {
            using (SqlConnection conn = new SqlConnection(connectionString))
            {
                conn.Open();
                string query = "SELECT userid, emridhembiemri, dega FROM Users WHERE userid = @userid";

                using (SqlCommand cmd = new SqlCommand(query, conn))
                {
                    cmd.Parameters.AddWithValue("@userid", userId);
                    using (SqlDataReader reader = cmd.ExecuteReader())
                    {
                        if (reader.Read())
                        {
                            UserInfo user = new UserInfo();
                            user.UserId = Convert.ToInt32(reader["userid"]);
                            user.FullName = reader["emridhembiemri"].ToString();
                            user.Dega = Convert.ToInt32(reader["dega"]);
                            return user;
                        }
                    }
                }
            }
            return null;
        }

        private static List<string> GetApproverEmails(int branchId)
        {
            List<string> emails = new List<string>();
            using (SqlConnection conn = new SqlConnection(connectionString))
            {
                conn.Open();
                string query = "SELECT email FROM Users WHERE grupid = 5 AND dega = @dega";

                using (SqlCommand cmd = new SqlCommand(query, conn))
                {
                    cmd.Parameters.AddWithValue("@dega", branchId);
                    using (SqlDataReader reader = cmd.ExecuteReader())
                    {
                        while (reader.Read())
                        {
                            string email = reader["email"]?.ToString();
                            if (!string.IsNullOrEmpty(email))
                                emails.Add(email);
                        }
                    }
                }
            }
            return emails;
        }

        private static void SendEmail(string toEmail, string subject, string body)
        {
            string smtpServer = "mail.yourcompany.local"; // Microsoft Exchange server

            using (SmtpClient smtp = new SmtpClient(smtpServer))
            {
                smtp.UseDefaultCredentials = true; // Windows auth
                smtp.DeliveryMethod = SmtpDeliveryMethod.Network;

                MailMessage msg = new MailMessage
                {
                    From = new MailAddress("no-reply@yourcompany.com"),
                    Subject = subject,
                    Body = body,
                    IsBodyHtml = true
                };

                msg.To.Add(toEmail);
                smtp.Send(msg);
            }
        }
    }

    public class MortgageInfo
    {
        public int UserId { get; set; }
        public string Lloji { get; set; }
        public string Koment { get; set; }
        public DateTime InsertDate { get; set; }
        public string Details { get; set; }
    }

    public class UserInfo
    {
        public int UserId { get; set; }
        public string FullName { get; set; }
        public int Dega { get; set; }
    
             
       
 